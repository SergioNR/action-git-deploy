name: 'Koyeb: build and deploy'
description: 'Build and deploy a GIT repository on Koyeb.'

inputs:
  app-name:
    description: "The Koyeb application name to create"
    required: false

  service-name:
    description: "Koyeb service name"
    required: false
    default: "${{ github.ref_name }}"

  build-timeout:
    description: "Maximum number of seconds to wait for the build"
    required: false
    # 15 minutes
    default: "900"

  healthy-timeout:
    description: "Maximum number of seconds to wait for healthy status to be reached"
    required: false
    # 15 minutes
    default: "900"

  git-url:
    description: "URL of the GIT repository to deploy"
    required: false
    default: "github.com/${{ github.repository }}"

  git-workdir:
    description: "Workdir, if the application to build is not in the root directory of the repository"
    required: false

  git-branch:
    description: "GIT branch to deploy"
    required: false
    default: "${{ github.ref_name }}"

  git-build-command:
    description: "Command to build the application"
    required: false
    default: ""

  git-run-command:
    description: "Command to run the application"
    required: false
    default: ""

  service-env:
    description: "Comma separated list of <KEY>=<value> to specify the application environment"
    required: false
    default: ""

  service-ports:
    description: "Comma separated list of <KEY>=<value> to specify the ports to expose"
    required: false
    default: "80:http"

  service-routes:
    description: "Comma separated list of <path>:<port> to specify the routes to expose"
    required: false
    default: "/:80"

  service-checks:
    description: "Comma separated list of <port>:<protocol>:<path> to specify the service healthchecks"
    required: false

runs:
  using: "composite"
  steps:
    - name: Slugify application name
      shell: sh
      run: |
        if [ -z "${{ inputs.app-name }}" ]; then
          # Remove the owner from the repository
          APP_SLUG=$(echo '${{ github.repository }}/${{ github.ref_name }}' | cut -d '/' -f 2-)
        else
          APP_SLUG="${{ inputs.app-name }}"
        fi

        # sed: to replace non alphanum chars with -
        # tail: limit to the last 23 chars (maximum Koyeb application name)
        # sed: if the leading char is a dash, remove it
        echo "APP_SLUG=$(echo $APP_SLUG | sed 's/[^a-z0-9]/-/g' | tail -c 24 | sed 's/^-//g')" | tee $GITHUB_ENV

    - name: Slugify service name
      shell: sh
      run: |
        # sed: to replace non alphanum chars with -
        echo "SERVICE_SLUG=$(echo ${{ inputs.service-name }} | sed 's/[^a-z0-9]/-/g' | tee $GITHUB_ENV

    - name: Create Koyeb application
      shell: sh
      run: |
        ${{ github.action_path }}/scripts/app-create.py \
          --app-name "${{ env.APP_SLUG }}"

    - name: Create Koyeb service
      shell: sh
      run: |
        ${{ github.action_path }}/scripts/service-upsert.py \
          --app-name "${{ env.APP_SLUG }}" \
          --service-name "${{ env.SERVICE_SLUG }}" \
          --git-url "${{ inputs.git-url }}" \
          --git-workdir "${{ inputs.git-workdir }}" \
          --git-branch "${{ inputs.git-branch }}" \
          --git-build-command "${{ inputs.git-build-command }}" \
          --git-run-command "${{ inputs.git-run-command }}" \
          --service-env "${{ inputs.service-env }}" \
          --service-ports "${{ inputs.service-ports }}" \
          --service-routes "${{ inputs.service-routes }}" \
          --service-checks "${{ inputs.service-checks }}"

    - id: get-deployment
      name: Get last deployment of the Koyeb service
      shell: sh
      run: |
        ${{ github.action_path }}/scripts/deployment-get-last-id.py \
          --app-name "${{ env.APP_SLUG }}" \
          --service-name "${{ env.SERVICE_SLUG }}" | tee $GITHUB_OUTPUT

    - name: Show build logs
      shell: sh
      run: |
        ${{ github.action_path }}/scripts/deployment-show-build-logs.py \
          --deployment-id "${{ steps.get-deployment.outputs.deployment-id }}" \
          --timeout "${{ inputs.build-timeout }}"

    - name: Poll deployment status
      shell: sh
      run: |
        ${{ github.action_path }}/scripts/deployment-wait-healthy.py \
          --deployment-id "${{ steps.get-deployment.outputs.deployment-id }}" \
          --timeout "${{ inputs.healthy-timeout }}"

    - name: Show app domain
      shell: sh
      run: |
        ${{ github.action_path }}/scripts/app-show-domain.py \
          --app-name "${{ env.APP_SLUG }}"